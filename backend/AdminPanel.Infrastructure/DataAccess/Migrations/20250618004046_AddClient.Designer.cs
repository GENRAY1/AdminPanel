// <auto-generated />
using System;
using AdminPanel.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AdminPanel.Infrastructure.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618004046_AddClient")]
    partial class AddClient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AdminPanel.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b4b4145-6122-4d99-9d7b-e669112618fe"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@mirra.dev",
                            Password = "$2a$11$..1tQa8qz03JlNsIgHn9ZOc2/iUEM5Y1RYCRbxcm0Y.B5wLV0ZCpO"
                        });
                });

            modelBuilder.Entity("AdminPanel.Domain.Clients.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3c4ea0e-3c29-4ffe-82a8-8e72857035f3"),
                            Balance = 500000.11m,
                            CreatedAt = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ivan.petrov@example.com",
                            Name = "Иван Петров"
                        },
                        new
                        {
                            Id = new Guid("f33b8c2e-9335-419a-a1ca-85d6eb5f5c89"),
                            Balance = 100000m,
                            CreatedAt = new DateTime(2023, 5, 21, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "contact@globalinvest.ru",
                            Name = "ООО 'Глобал Инвест'",
                            UpdatedAt = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("751150d4-8e8e-466f-ac7d-bea47981281e"),
                            Balance = 200000m,
                            CreatedAt = new DateTime(2021, 5, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "contact@rogakopyta.ru",
                            Name = "ООО 'Рога и Копыта'",
                            UpdatedAt = new DateTime(2025, 3, 24, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("AdminPanel.Domain.Clients.ClientTag", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Tag")
                        .HasColumnType("integer");

                    b.HasKey("ClientId", "Tag");

                    b.ToTable("ClientTag");
                });

            modelBuilder.Entity("AdminPanel.Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("AdminPanel.Domain.Clients.ClientTag", b =>
                {
                    b.HasOne("AdminPanel.Domain.Clients.Client", null)
                        .WithMany("Tags")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdminPanel.Domain.RefreshTokens.RefreshToken", b =>
                {
                    b.HasOne("AdminPanel.Domain.Accounts.Account", null)
                        .WithOne()
                        .HasForeignKey("AdminPanel.Domain.RefreshTokens.RefreshToken", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdminPanel.Domain.Clients.Client", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
